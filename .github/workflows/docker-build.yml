name: Docker Build and Test

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: false
          tags: projectcamp-backend:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Create test environment file
        run: |
          cat > .env << EOF
          PORT=3000
          NODE_ENV=test
          SERVER_URL=http://localhost:3000
          MONGO_URI=mongodb://mongodb:27017/project-camp-test
          ACCESS_TOKEN_SECRET=test-access-secret-min-32-characters-long
          REFRESH_TOKEN_SECRET=test-refresh-secret-min-32-characters-long
          ACCESS_TOKEN_EXPIRY=15m
          REFRESH_TOKEN_EXPIRY=30d
          CORS_ORIGIN=http://localhost:5173
          EOF

      - name: Start services
        run: docker-compose up -d

      - name: Wait for services to be ready
        run: |
          timeout 60 sh -c 'until docker-compose exec -T backend node -e "require(\"http\").get(\"http://localhost:3000/api/v1/healthcheck\", (r) => {process.exit(r.statusCode === 200 ? 0 : 1)})"; do sleep 2; done'

      - name: Test health endpoint
        run: |
          curl -f http://localhost:3000/api/v1/healthcheck || exit 1

      - name: Show logs on failure
        if: failure()
        run: |
          docker-compose logs backend
          docker-compose logs mongodb

      - name: Stop services
        if: always()
        run: docker-compose down -v

  security-scan:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Build image
        run: docker build -t projectcamp-backend:scan .

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: projectcamp-backend:scan
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

